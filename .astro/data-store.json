[["Map",1,2,7,8],"meta::meta",["Map",3,4,5,6],"astro-version","4.16.18","config-digest","b10687f626f4ca63","blog",["Map",9,10],"8小时外如何干好后端",{"id":9,"data":11,"body":20,"filePath":21,"digest":22,"rendered":23},{"author":12,"pubDatetime":13,"modDatetime":14,"title":15,"featured":16,"draft":16,"tags":17,"description":19},"Vanyongqi",["Date","2025-02-07T10:58:52.737Z"],["Date","2025-02-07T10:58:52.737Z"],"8小时外,如何干好后端",false,[18],"生活思考","带着这个问题所记录一些摘抄与《请给我结果》读后感","\n在一个小公司，天天 CRUD，程序员如何练级，不断提升自己？\n\n在大公司，就是个螺丝钉，天天就是自己那一亩三分地，如何不断提升自己，不被淘汰？\n\n**第一步 建立自己的学习实验室**\n\n在学习的过程中，看到的知识，一定要动手实践，自己搭建运行环境把程序跑起来，再写一些实践性质的验证程序，碰到 bug，慢慢调试、修复。只有这样，你学到的东西才能转换成你自己的，才能对编程这件事情有更清晰的认知。\n\n**第二步 把实验室升级成工作室**\n\n实验室是给你做实验用的，只要你有想法，都要在实验室进行实验，验证自己的想法。\n\n工作室和实验室有什么区别？实验室只是做做实验，工作室是要完成一个比较完整的功能的。\n\n你可以做一个小的产品，让朋友或者其他用户来用。哪怕你做的产品很简单、界面不好看。\n\n比如作为 Java 后端开发，你可以开发一个网站，我看很多人开发了求职网站、互联网商城等产品。\n\n这个时候你可以组队，比如和一个前端同学一起完成。\n\n完成这个产品的时候，你需要找一个主流的[技术框架]，比如后端使用 Spring Boot，前端使用 VUE。\n\n你应该去尝试使用各种最前沿的，你可能没用过的技术和框架。举个例子：Spring Boot/DDD + JDK21 + MyBatis + Redis + Elasticsearch 8 + LogStash + Kibana + K8S + Docker。\n\n基本功能完成之后，一定要做[压力测试]，这样你才知道自己的产品和市面上产品的差距，逼着自己对产品进行优化。\n\n**第三步 把工作室升级为工厂**\n\n工作室和工厂有什么区别？工作室比较随意，用户可能基本上是自己的朋友。而工厂是有相关的行业标准的，是有一整套的规范和标准的。\n\n正常来说，工作室的能力你都有的话，就可以去一般不错的技术工作任职，甚至去头部互联网公司了。\n\n但是你一定要参与公司的核心部门或者参加公司的核心项目，在那里，你可以收获更多、更前沿的经验和技能。怎么判断部门是否公司的核心？根据你的部门是否贡献了公司的很大比例的收入即可，这是业务部门；如果是基础支撑部门，判断是否获得公司最多技术奖项即可。\n\n同时，你需要不断深入技术，对软件开发的套路和各种 trade-off 以及各种解决的方案的优缺点非常熟悉。也要写出可维护、可扩展、可重用、可读性强的代码。\n\n另外，我觉得最重要的一点是，需要走出去，和其他优秀的工程师一起讨论和工作。去参加行业分享会议，接触更多行业专家，学习更多的行业成功经验和踩坑经验。和他们聊天，结合自己的工作、经历去思考他们的经验对自己的启发和思考。\n\n**贯穿始终，输出倒逼输出**\n\n在我们学习、实践的过程中，可以把自己的学习过程、实践过程、踩坑过程分享出去，这样除了能积累自己的影响力，还能更好找的自己的同行者、追随者。甚至，大概率，你能做做成一个学习型 IP，以此开发出自己的副业。\n\n以下几个点，请时刻谨记\n\n- 带着问题学习，更容易获得正反馈和成就感。\n- 一定要多问为什么？为什么这么设计？为什么这么编码？有没有更好的设计方法？这么设计会有什么潜在问题？\n- 多输出。只会能教会别人，你才是真的会了。而且输出能够让你重新系统整理学到的知识，还能不断积累影响力。\n- 多实践。编程是一个动手学科，不动手什么都学不会！\n- 坚持学习。编程是一个需要不断学习精进的学科，在这条路上，有很多理由让你放弃，但是只有坚持才有突破！\n\n[nginx]和redis的伟大之处， 不在于它们技术有多难，基本上任何一个合格的程序员，在学习它们背后的设计思路和底层技术后， 通过记忆复刻一个类似的东西出来并不算难。nginx和redis之所以伟大， 是它们都是它们的作者出于对现实的不满意，通过自己的能力改造世界的成果。这背后最不可思议的是，一个人能认识到现实世界中的不完美， 同时他还能想到一种方式做出改进，同时他还有能力实现自己的想法，这三件事巧合地发生在一个人身上，这才是最难能可贵的。\n\n\n### 《请给我结果》读后感\n> 跟着对象一起读的.\n```text\n结果不是完成任务,不要被行动所迷惑\n行动,行动来自结果心态,要按照结果心态去行动,不能单纯的should,要must,不要放弃,坚持结果,就算完不成,差的结果也比没有结果好.\n行动的姿态,立即行动,有的放矢,主抓重点,不盲目追求完美,也不要有借口.\n\n找准位置,对待职位,要有司机心态,,思维应该处于自己所在职位的所在层次,心态上要进行改变,同时也要养精蓄锐,往上一层次去努力,\n处于有准备的状态中.不仅对自己负责,也要对他人负责.人很容易做出点成绩就骄傲自满,要保持时刻的归零心态,\n要有明确的结果做事要为公司创造价值,超越期望,不能找理由,猎鹰不应该在鸡群里讨论会不会飞.\n结果也来自责任感,锁定责任这只猴子,各就各位,承担属于本岗位的责任,要明白责任变动流转.\n学会独立做事,作为基层员工,要学做后三种方式(等着做；问着做；提出建议，等着做，边做边汇报；主动做，然后按程序汇报流程化),\n不当被“保姆”照顾的人.\n掌握当前工作中的流程,分析事前,事中,事后,不要含糊.分析所处理的关键点,不让自己肩上的猴子乱跑.\n时间华仔重要而不紧急的事情,总会产生很多错觉在急迫而不重要的事情上.要注意避免.\n授权与受权,对自己所要处理的事情要能兜底,扛住自己的责任. 监督与检查 ,不能打感情牌,要用流程、制度、考核、奖励进行责任与业绩的协调.\n不能接受没有监督的授权,要能对自己的任务监督,则才能授权.\n不可能不失败,但不能对失败妥协,善待失败,不放弃.追求成功,追求结果,但要明白这条路并不容易走.\n总结48字,\n执行文化的内核,认真第一,聪明第二,要靠制度,靠集体,而不是单一的聪明人. 8\n执行文化的方针,结果提前,自我退后,锁定目标,专注重复.做事不要有自我,将利益放在第一位,才能保证执行的效果.16\n执行的关键,把握住事前(决定的就不要变) 事中(先开枪,后瞄准) 事后(对结果建立责任与执行机制)的关键点,\n决心第一,成败第二,速度第一,完美第二,结果第一,理由第二.24\n```","src/content/blog/8小时外,如何干好后端.md","f008d0c97d9cfa52",{"html":24,"metadata":25},"\u003Cp>在一个小公司，天天 CRUD，程序员如何练级，不断提升自己？\u003C/p>\n\u003Cp>在大公司，就是个螺丝钉，天天就是自己那一亩三分地，如何不断提升自己，不被淘汰？\u003C/p>\n\u003Cp>\u003Cstrong>第一步 建立自己的学习实验室\u003C/strong>\u003C/p>\n\u003Cp>在学习的过程中，看到的知识，一定要动手实践，自己搭建运行环境把程序跑起来，再写一些实践性质的验证程序，碰到 bug，慢慢调试、修复。只有这样，你学到的东西才能转换成你自己的，才能对编程这件事情有更清晰的认知。\u003C/p>\n\u003Cp>\u003Cstrong>第二步 把实验室升级成工作室\u003C/strong>\u003C/p>\n\u003Cp>实验室是给你做实验用的，只要你有想法，都要在实验室进行实验，验证自己的想法。\u003C/p>\n\u003Cp>工作室和实验室有什么区别？实验室只是做做实验，工作室是要完成一个比较完整的功能的。\u003C/p>\n\u003Cp>你可以做一个小的产品，让朋友或者其他用户来用。哪怕你做的产品很简单、界面不好看。\u003C/p>\n\u003Cp>比如作为 Java 后端开发，你可以开发一个网站，我看很多人开发了求职网站、互联网商城等产品。\u003C/p>\n\u003Cp>这个时候你可以组队，比如和一个前端同学一起完成。\u003C/p>\n\u003Cp>完成这个产品的时候，你需要找一个主流的[技术框架]，比如后端使用 Spring Boot，前端使用 VUE。\u003C/p>\n\u003Cp>你应该去尝试使用各种最前沿的，你可能没用过的技术和框架。举个例子：Spring Boot/DDD + JDK21 + MyBatis + Redis + Elasticsearch 8 + LogStash + Kibana + K8S + Docker。\u003C/p>\n\u003Cp>基本功能完成之后，一定要做[压力测试]，这样你才知道自己的产品和市面上产品的差距，逼着自己对产品进行优化。\u003C/p>\n\u003Cp>\u003Cstrong>第三步 把工作室升级为工厂\u003C/strong>\u003C/p>\n\u003Cp>工作室和工厂有什么区别？工作室比较随意，用户可能基本上是自己的朋友。而工厂是有相关的行业标准的，是有一整套的规范和标准的。\u003C/p>\n\u003Cp>正常来说，工作室的能力你都有的话，就可以去一般不错的技术工作任职，甚至去头部互联网公司了。\u003C/p>\n\u003Cp>但是你一定要参与公司的核心部门或者参加公司的核心项目，在那里，你可以收获更多、更前沿的经验和技能。怎么判断部门是否公司的核心？根据你的部门是否贡献了公司的很大比例的收入即可，这是业务部门；如果是基础支撑部门，判断是否获得公司最多技术奖项即可。\u003C/p>\n\u003Cp>同时，你需要不断深入技术，对软件开发的套路和各种 trade-off 以及各种解决的方案的优缺点非常熟悉。也要写出可维护、可扩展、可重用、可读性强的代码。\u003C/p>\n\u003Cp>另外，我觉得最重要的一点是，需要走出去，和其他优秀的工程师一起讨论和工作。去参加行业分享会议，接触更多行业专家，学习更多的行业成功经验和踩坑经验。和他们聊天，结合自己的工作、经历去思考他们的经验对自己的启发和思考。\u003C/p>\n\u003Cp>\u003Cstrong>贯穿始终，输出倒逼输出\u003C/strong>\u003C/p>\n\u003Cp>在我们学习、实践的过程中，可以把自己的学习过程、实践过程、踩坑过程分享出去，这样除了能积累自己的影响力，还能更好找的自己的同行者、追随者。甚至，大概率，你能做做成一个学习型 IP，以此开发出自己的副业。\u003C/p>\n\u003Cp>以下几个点，请时刻谨记\u003C/p>\n\u003Cul>\n\u003Cli>带着问题学习，更容易获得正反馈和成就感。\u003C/li>\n\u003Cli>一定要多问为什么？为什么这么设计？为什么这么编码？有没有更好的设计方法？这么设计会有什么潜在问题？\u003C/li>\n\u003Cli>多输出。只会能教会别人，你才是真的会了。而且输出能够让你重新系统整理学到的知识，还能不断积累影响力。\u003C/li>\n\u003Cli>多实践。编程是一个动手学科，不动手什么都学不会！\u003C/li>\n\u003Cli>坚持学习。编程是一个需要不断学习精进的学科，在这条路上，有很多理由让你放弃，但是只有坚持才有突破！\u003C/li>\n\u003C/ul>\n\u003Cp>[nginx]和redis的伟大之处， 不在于它们技术有多难，基本上任何一个合格的程序员，在学习它们背后的设计思路和底层技术后， 通过记忆复刻一个类似的东西出来并不算难。nginx和redis之所以伟大， 是它们都是它们的作者出于对现实的不满意，通过自己的能力改造世界的成果。这背后最不可思议的是，一个人能认识到现实世界中的不完美， 同时他还能想到一种方式做出改进，同时他还有能力实现自己的想法，这三件事巧合地发生在一个人身上，这才是最难能可贵的。\u003C/p>\n\u003Ch3 id=\"请给我结果读后感\">《请给我结果》读后感\u003C/h3>\n\u003Cblockquote>\n\u003Cp>跟着对象一起读的.\u003C/p>\n\u003C/blockquote>\n\u003Cpre class=\"astro-code astro-code-themes min-light night-owl\" style=\"background-color:#ffffff;--shiki-dark-bg:#011627;color:#24292eff;--shiki-dark:#d6deeb; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>结果不是完成任务,不要被行动所迷惑\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>行动,行动来自结果心态,要按照结果心态去行动,不能单纯的should,要must,不要放弃,坚持结果,就算完不成,差的结果也比没有结果好.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>行动的姿态,立即行动,有的放矢,主抓重点,不盲目追求完美,也不要有借口.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>找准位置,对待职位,要有司机心态,,思维应该处于自己所在职位的所在层次,心态上要进行改变,同时也要养精蓄锐,往上一层次去努力,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>处于有准备的状态中.不仅对自己负责,也要对他人负责.人很容易做出点成绩就骄傲自满,要保持时刻的归零心态,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>要有明确的结果做事要为公司创造价值,超越期望,不能找理由,猎鹰不应该在鸡群里讨论会不会飞.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>结果也来自责任感,锁定责任这只猴子,各就各位,承担属于本岗位的责任,要明白责任变动流转.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>学会独立做事,作为基层员工,要学做后三种方式(等着做；问着做；提出建议，等着做，边做边汇报；主动做，然后按程序汇报流程化),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>不当被“保姆”照顾的人.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>掌握当前工作中的流程,分析事前,事中,事后,不要含糊.分析所处理的关键点,不让自己肩上的猴子乱跑.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>时间华仔重要而不紧急的事情,总会产生很多错觉在急迫而不重要的事情上.要注意避免.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>授权与受权,对自己所要处理的事情要能兜底,扛住自己的责任. 监督与检查 ,不能打感情牌,要用流程、制度、考核、奖励进行责任与业绩的协调.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>不能接受没有监督的授权,要能对自己的任务监督,则才能授权.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>不可能不失败,但不能对失败妥协,善待失败,不放弃.追求成功,追求结果,但要明白这条路并不容易走.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>总结48字,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>执行文化的内核,认真第一,聪明第二,要靠制度,靠集体,而不是单一的聪明人. 8\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>执行文化的方针,结果提前,自我退后,锁定目标,专注重复.做事不要有自我,将利益放在第一位,才能保证执行的效果.16\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>执行的关键,把握住事前(决定的就不要变) 事中(先开枪,后瞄准) 事后(对结果建立责任与执行机制)的关键点,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>决心第一,成败第二,速度第一,完美第二,结果第一,理由第二.24\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":26,"imagePaths":31,"frontmatter":11},[27],{"depth":28,"slug":29,"text":30},3,"请给我结果读后感","《请给我结果》读后感",[]]